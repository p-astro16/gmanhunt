local customUI = Nexus.UIBuilder:Start({
    debug = true, // default false: overlays the current selected parent orange
})

:CreateFrame({
    title = "UI Title", // default "": the title of the frame
    icon = "iG1M1Ze", // default "": imgur icon ("" disables the feature)
    size = {
        w = 100, // default Nexus:Scale(200): the width of the frame
        h = 100, // default Nexus:Scale(300): the height of the frame
    },

    darken = true, // default false: darkens the screen
    id = "Custom ID", // default "": if another frame is created with this id then the other frame is deleted   
    reference = panel, // default nil: if the reference is deleted then so is this frame
})

// this can only be added onto the frame
// adds a new button in the top right header
:AddIconButton({
    icon = "", // default "": the imgur icon of the button
    DoClick = function() end, // default nil: a function of when the button is clicked
})

:AddNavbar({
    size = {
        w = 100, // default Nexus:Scale(200): the width of the navbar
        h = 100, // default Nexus:Scale(300): the height of the navbar
    },
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
})

:AddComboBox({
    size = {
        w = 100, // default Nexus:Scale(200): the width of the navbar
        h = 100, // default Nexus:Scale(300): the height of the navbar
    },
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block

    text = "My ComboBox", // default "N/A": the text of the comboBox
})

// This can be used for both Navbar and ComboBox
// text: the text displayed in the button
// func: a function of what to do if this button is pressed
// icon: the icon displayed with the text (navbar only)
:AddChoice(text, func, icon)

:AddText({
    text = "", // default "": the text displayed
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
    align = 5, // default 4: how the text should be aligned (0-9)
})

// a nice line to divide elements
:AddSpacer()

:AddBlock({
    size = {
        h = 50, // default: Nexus:Scale(50): the height of the block
    },
    padding = 10, // default Nexus:Scale(10): the padding of the block
    dontDraw = false, // default false: should the block background be drawn? true = dont draw | false draw
})

:AddButton({
    size = {
        h = 50, // default: Nexus:Scale(50): the height of the button
    },

    text = "", // default "": the text displayed
    DoClick = function() end, // default nil: a function to call when clicked
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
    color = Nexus.Colors.Red, // default Nexus.Colors.Primary: the colour of the button
    font = Nexus:GetFont(20), // default: Nexus:GetFont(20): the font of the button
})

:AddCheckbox({
    size = {
        h = 50, // default: Nexus:Scale(50): the height of the checkbox
    },

    text = "", // default "": the text displayed (auto sizes the width)
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
    stateChanged = function(state) end, // default nil: a function to call when the state is changed
    state = false, // default false: the state of the button on creation
})

:AddNumSlider({
    size = {
        h = 50, // default: Nexus:Scale(50): the height of the checkbox
    },

    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
    value = 0, // default 0: the starting value of the slider
    max = 100, // default 100: the maximum value of the slider
    onChange = function(value) end, // default nil: a function to call when the value is changed
})

:AddCategory({
    size = {
        h = 50, // default: Nexus:Scale(50): the height of the checkbox
    },

    title = "", // default "": the title of the category
    margin = 10, // default Nexus:Scale(10): this only affects the margins if its contained outside a block
})

// adds a scrollpanel to the current selected element
:AddScrollPanel()

// Goes to the previous parent
// useful for getting back onto the frame when inside a category ect
:BackupParent()

--[[
:GetLastPanel() returns the last created panel (checkbox, scrollpanel ect)
as this doesnt return self you need to rereference the starting variable 
when you add more elements for example:

local customUI = Nexus.UIBuilder:Start()
:AddScrollPanel()

local scrollPanel = customUI:GetLastPanel()

// here we have to rereference the original variable
customUI:AddCategory({
    title = "My Category",
})
]]--
:GetLastPanel()

// gets called whenever we move onto a new parent (moving into a block, scrollpanel, category)
:OnNewSelection(function(newParent)
    
end)